#include "stdafx.h"
#include "SWE_Odometry.h"

#define WHEELBASE 400

ADTF_FILTER_PLUGIN("SWE_Odometry", OID_ADTF_SWE_ODOMETRY, SWE_Odometry)

SWE_Odometry::SWE_Odometry(const tChar* __info) : cFilter(__info)
{
	m_steeringAngle = 0;
	m_slippageAngle = 0;
	m_velocityLeft = 0;
	m_velocityRight = 0;
	
	m_currTimeStamp = 0;
	m_oldTimeStamp = GetTime();
	m_lastPinEvent = GetTime();

	m_distanceX_sum = 0;
	m_distanceY_sum = 0;
	m_heading_sum = 0;

	//odometryData m_odometryData;
	
	m_odometryData.angle = 0.0;
	m_odometryData.distance = 0.0;
	m_odometryData.heading = 0.0;

}

SWE_Odometry::~SWE_Odometry()
{
}

tResult SWE_Odometry::Init(tInitStage eStage, __exception)
{
    RETURN_IF_FAILED(cFilter::Init(eStage, __exception_ptr))

    if (eStage == StageFirst)
		{
            cObjectPtr<IMediaDescriptionManager> pDescManager;
            RETURN_IF_FAILED(_runtime->GetObject(OID_ADTF_MEDIA_DESCRIPTION_MANAGER,IID_ADTF_MEDIA_DESCRIPTION_MANAGER,(tVoid**)&pDescManager,__exception_ptr));

            tChar const * strDescSignalValue = pDescManager->GetMediaDescription("tSignalValue");
            RETURN_IF_POINTER_NULL(strDescSignalValue);        
            cObjectPtr<IMediaType> pTypeSignalValue = new cMediaType(0, 0, 0, "tSignalValue", strDescSignalValue,IMediaDescription::MDF_DDL_DEFAULT_VERSION);	
            RETURN_IF_FAILED(pTypeSignalValue->GetInterface(IID_ADTF_MEDIA_TYPE_DESCRIPTION, (tVoid**)&m_pCoderDescSignal)); 
	

			/*Example
			RETURN_IF_FAILED( m_global_fences_in.Create( "Global_Fences_in",
                                          cObjectPtr<IMediaType>( new adtf::cMediaType( MEDIA_TYPE_STRUCTURED_DATA, MEDIA_SUBTYPE_STRUCT_FLOAT32 ) ),
                                          static_cast<IPinEventSink*>( this ) ) );
        		RETURN_IF_FAILED( RegisterPin( &m_global_fences_in ) );
			*/

			RETURN_IF_FAILED(m_oInputVelocityLeft.Create("Velocity_left_Wheel", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
			RETURN_IF_FAILED(RegisterPin(&m_oInputVelocityLeft));
			RETURN_IF_FAILED(m_oInputVelocityRight.Create("Velocity_right_Wheel", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
			RETURN_IF_FAILED(RegisterPin(&m_oInputVelocityRight));
			RETURN_IF_FAILED(m_oInputSteeringAngle.Create("SteeringAngle", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
			RETURN_IF_FAILED(RegisterPin(&m_oInputSteeringAngle));
			RETURN_IF_FAILED(m_oInputTrigger.Create("Trigger", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
			RETURN_IF_FAILED(RegisterPin(&m_oInputTrigger));



			RETURN_IF_FAILED(m_oOutputOdometry.Create("Odometry_Output", pTypeSignalValue, static_cast<IPinEventSink*> (this)));
			RETURN_IF_FAILED(RegisterPin(&m_oOutputOdometry));
		

    RETURN_NOERROR;
		}
    else if (eStage == StageNormal)
		{
			
		}
	else if(eStage == StageGraphReady)
		{	
			
		}
				
    RETURN_NOERROR;
}

tResult SWE_Odometry::OnPinEvent(	IPin* pSource, tInt nEventCode, tInt nParam1, tInt nParam2, IMediaSample* pMediaSample)
{
	
    if (nEventCode == IPinEventSink::PE_MediaSampleReceived && pMediaSample != NULL && m_pCoderDescSignal != NULL)
    {		

		tTimeStamp timeIntervall = 0;

		if (pSource == &m_oInputSteeringAngle)
		{	
			m_lastPinEvent = GetTime();

			// read-out the incoming Media Sample
			cObjectPtr<IMediaCoder> pCoderInput;
                	RETURN_IF_FAILED(m_pCoderDescSignal->Lock(pMediaSample, &pCoderInput));

			//get values from media sample        
                	pCoderInput->Get("f32Value", (tVoid*)&m_buffer);
                	pCoderInput->Get("ui32ArduinoTimestamp", (tVoid*)&m_currTimeStamp);
                	m_pCoderDescSignal->Unlock(pCoderInput);

			//processing the data
			timeIntervall = m_currTimeStamp - m_oldTimeStamp;
			calcSingleOdometry( timeIntervall );

			m_steeringAngle = m_buffer;

		}
		else if (pSource == &m_oInputVelocityLeft)
		{	

			m_lastPinEvent = GetTime();				
			
			// read-out the incoming Media Sample
		        cObjectPtr<IMediaCoder> pCoderInput;
		        RETURN_IF_FAILED(m_pCoderDescSignal->Lock(pMediaSample, &pCoderInput));
		               
		        //get values from media sample        
		        pCoderInput->Get("f32Value", (tVoid*)&m_buffer);
		        pCoderInput->Get("ui32ArduinoTimestamp", (tVoid*)&m_currTimeStamp);
		        m_pCoderDescSignal->Unlock(pCoderInput);       
		        
		        //processing the data
			timeIntervall = m_currTimeStamp - m_oldTimeStamp;
		    	calcSingleOdometry( timeIntervall );

			m_velocityLeft = m_buffer;
		        //if (m_bDebugModeEnabled) LOG_INFO(cString::Format("Sensorfilter received: ID %x Value %f",ID,value));   
                        
            	}
		else if (pSource == &m_oInputVelocityRight)
		{
			m_lastPinEvent = GetTime();

			// read-out the incoming Media Sample
		        cObjectPtr<IMediaCoder> pCoderInput;
		        RETURN_IF_FAILED(m_pCoderDescSignal->Lock(pMediaSample, &pCoderInput));
		               
		        //get values from media sample        
		        pCoderInput->Get("f32Value", (tVoid*)&m_buffer);
		        pCoderInput->Get("ui32ArduinoTimestamp", (tVoid*)&m_currTimeStamp);
		        m_pCoderDescSignal->Unlock(pCoderInput);       
		        
		        //processing the data
			timeIntervall = m_currTimeStamp - m_oldTimeStamp;
		    	calcSingleOdometry( timeIntervall );

			m_velocityRight = m_buffer;

		
		        //if (m_bDebugModeEnabled) LOG_INFO(cString::Format("Sensorfilter received: ID %x Value %f",ID,value));   
            	}
		else if (pSource == &m_oInputTrigger)
		{
			timeIntervall = GetTime() - m_lastPinEvent;
			m_lastPinEvent = GetTime();			

			calcSingleOdometry( timeIntervall );

			odometryOutput();

		}
	}
	RETURN_NOERROR;
}

tTimeStamp SWE_Odometry::GetTime()
{
    return (_clock != NULL) ? _clock->GetTime () : cSystem::GetTime();
}


tResult SWE_Odometry::sendData(odometryData odometryData)
{
		//Ausgabe als Media Sample
		cObjectPtr<IMediaSample> pNewSample;
		RETURN_IF_FAILED( AllocMediaSample((tVoid**) &pNewSample) );
		RETURN_IF_POINTER_NULL( pNewSample );
		RETURN_IF_FAILED( pNewSample->Update( m_lastPinEvent, &odometryData, sizeof(odometryData), IMediaSample::MSF_None) );
		m_oOutputOdometry.Transmit( pNewSample );

    RETURN_NOERROR;
}

void SWE_Odometry::calcSingleOdometry(tTimeStamp timeIntervall)
{
	tFloat32 velocityMean;
	tFloat32 radius;
	tFloat32 distance;
	tFloat32 angle;




	//calculate single movement step

	velocityMean = ( m_velocityLeft + m_velocityRight ) / 2;
	
	if ( (m_steeringAngle + m_slippageAngle) > 1.4) //prevent crazy steering angles
	{
		radius = WHEELBASE / ( tan( 1.4 ) );
	}
	else
	{
		radius = WHEELBASE / ( tan( m_steeringAngle + m_slippageAngle ) );
	}
	
	if ( timeIntervall < 0 ) timeIntervall = 0;

	angle = velocityMean * timeIntervall / radius;
	distance = 2 * radius * sin( angle * 0.5 );

	
	//divide vector into components + add to sum

	m_distanceX_sum = m_distanceX_sum + cos( angle + m_heading_sum );
	m_distanceY_sum = m_distanceY_sum + sin( angle + m_heading_sum );
	
	m_heading_sum = m_heading_sum + angle;
	
	// stuff

	m_oldTimeStamp = m_currTimeStamp;
}

void SWE_Odometry::odometryOutput()
{
	//prepare data
	if ( m_distanceX_sum <= 0.0 ) m_distanceX_sum = 0.000000000001 ;
	
	m_odometryData.angle = atan( m_distanceY_sum / m_distanceX_sum );

	m_odometryData.distance = sqrt( (m_distanceY_sum * m_distanceY_sum) + (m_distanceX_sum * m_distanceX_sum) );
	
	m_odometryData.heading = m_heading_sum;
	
	m_distanceX_sum = 0;
	m_distanceY_sum = 0;
	m_heading_sum = 0;

	//output data

	sendData(m_odometryData);
}
